version: '3.5'                                                              

networks:
  default:
    driver: bridge
    name: {{ CI_PROJECT_NAME }}
    ipam:
      config:
        - subnet: 172.30.0.0/24

volumes:
  redis_data:
  postgres_data:

services:
  postgres:
    image: postgres:13-alpine
    container_name: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data:rw,z
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=test
      - POSTGRES_EXTERNAL_PORT=5432
      - POSTGRES_DB=archon-db
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always

  redis:
    image: redis:6-alpine
    container_name: redis
    volumes:
      - redis_data:/data:rw,z
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 1s
      timeout: 3s
      retries: 30
    restart: always

  api-gateway:
    image: '{{ CI_REGISTRY_IMAGE }}:{{ CI_COMMIT_REF_NAME }}'
    container_name: api-gateway
    environment:
      - NODE_ENV=${NODE_ENV:-{{ CI_COMMIT_REF_NAME }}}
      - NODE_TLS_REJECT_UNAUTHORIZED=0
    command: sh -c "node /app/dist/apps/api-gateway/main.js"
    ports:
      - '3000:3000'
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: always

{% for service_name, service_port in services_for_compose.items() %}
  {{ service_name }}:
    image: '{{ CI_REGISTRY_IMAGE }}:{{ CI_COMMIT_REF_NAME }}'
    container_name: {{ service_name }}
    environment:
      - NODE_ENV=${NODE_ENV:-{{ CI_COMMIT_REF_NAME }}}
    command: sh -c "node /app/dist/apps/{{ service_name }}/main.js"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: always

{% endfor %}
