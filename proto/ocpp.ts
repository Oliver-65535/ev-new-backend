/**
* This file is auto-generated by nestjs-proto-gen-ts
*/

import { Observable } from 'rxjs';
import { Metadata } from '@grpc/grpc-js';

export namespace ocpp {
    export interface OcppService {
        changeConfiguration(
            data: ChangeConfigurationRequest,
            metadata?: Metadata,
            ...rest: any[]
        ): Observable<ChangeConfigurationResponse>;
        clearCache(
            data: ClearCacheRequest,
            metadata?: Metadata,
            ...rest: any[]
        ): Observable<ClearCacheResponse>;
        getDiagnostics(
            data: GetDiagnosticsRequest,
            metadata?: Metadata,
            ...rest: any[]
        ): Observable<GetDiagnosticsResponse>;
        remoteStartTransaction(
            data: RemoteStartTransactionRequest,
            metadata?: Metadata,
            ...rest: any[]
        ): Observable<RemoteStartTransactionResponse>;
        remoteStopTransaction(
            data: RemoteStopTransactionRequest,
            metadata?: Metadata,
            ...rest: any[]
        ): Observable<RemoteStopTransactionResponse>;
        reset(
            data: ResetRequest,
            metadata?: Metadata,
            ...rest: any[]
        ): Observable<ResetResponse>;
        unlockConnector(
            data: UnlockConnectorRequest,
            metadata?: Metadata,
            ...rest: any[]
        ): Observable<UnlockConnectorResponse>;
        reserveNow(
            data: ReserveNowRequest,
            metadata?: Metadata,
            ...rest: any[]
        ): Observable<ReserveNowResponse>;
        cancelReservation(
            data: CancelReservationRequest,
            metadata?: Metadata,
            ...rest: any[]
        ): Observable<CancelReservationResponse>;
        dataTransfer(
            data: DataTransferRequest,
            metadata?: Metadata,
            ...rest: any[]
        ): Observable<DataTransferResponse>;
        getConfiguration(
            data: GetConfigurationRequest,
            metadata?: Metadata,
            ...rest: any[]
        ): Observable<GetConfigurationResponse>;
        getLocalListVersion(
            data: GetLocalListVersionRequest,
            metadata?: Metadata,
            ...rest: any[]
        ): Observable<GetLocalListVersionResponse>;
        sendLocalList(
            data: SendLocalListRequest,
            metadata?: Metadata,
            ...rest: any[]
        ): Observable<SendLocalListResponse>;
        triggerMessage(
            data: TriggerMessageRequest,
            metadata?: Metadata,
            ...rest: any[]
        ): Observable<TriggerMessageResponse>;
        getCompositeSchedule(
            data: GetCompositeScheduleRequest,
            metadata?: Metadata,
            ...rest: any[]
        ): Observable<GetCompositeScheduleResponse>;
        setChargingProfile(
            data: SetChargingProfileRequest,
            metadata?: Metadata,
            ...rest: any[]
        ): Observable<SetChargingProfileResponse>;
        clearChargingProfile(
            data: ClearChargingProfileRequest,
            metadata?: Metadata,
            ...rest: any[]
        ): Observable<ClearChargingProfileResponse>;
        // Streams rpc
        logEventSream(
            data: Empty,
            metadata?: Metadata,
            ...rest: any[]
        ): Observable<LogEventSreamResponse>;
        taskEventSream(
            data: Empty,
            metadata?: Metadata,
            ...rest: any[]
        ): Observable<TaskEventSreamResponse>;
        transactionEventSream(
            data: Empty,
            metadata?: Metadata,
            ...rest: any[]
        ): Observable<TransactionEventSreamResponse>;
        getTimeStream(
            data: Empty,
            metadata?: Metadata,
            ...rest: any[]
        ): Observable<TimeStreamResponse>;
    }
    // tslint:disable-next-line:no-empty-interface
    export interface Empty {
    }
    export interface LogEventSreamResponse {
        event?: string;
    }
    export interface TaskEventSreamResponse {
        tasks?: string;
    }
    export interface TransactionEventSreamResponse {
        event?: string;
    }
    export interface TimeStreamResponse {
        result?: string;
    }
    export interface ChangeConfigurationRequest {
        chargePointId?: string;
        key?: string;
        value?: string;
    }
    export interface ChangeConfigurationResponse {
        httpStatus?: number;
        error?: string[];
        data?: ocpp.DataStatusType;
    }
    export interface ClearCacheRequest {
        chargePointId?: string;
    }
    export interface ClearCacheResponse {
        httpStatus?: number;
        error?: string[];
        data?: ocpp.DataStatusType;
    }
    export interface GetDiagnosticsRequest {
        chargePointId?: string;
        location?: string;
    }
    export interface GetDiagnosticsResponse {
        httpStatus?: number;
        error?: string[];
        data?: ocpp.DataGetDiagnosticsType;
    }
    export interface RemoteStartTransactionRequest {
        chargePointId?: string;
        connectorId?: number;
        idTag?: string;
    }
    export interface RemoteStartTransactionResponse {
        httpStatus?: number;
        error?: string[];
        data?: ocpp.DataStartTransactionType;
    }
    export interface RemoteStopTransactionRequest {
        chargePointId?: string;
        transactionId?: number;
    }
    export interface RemoteStopTransactionResponse {
        httpStatus?: number;
        error?: string[];
        data?: ocpp.DataStatusType;
    }
    export interface ResetRequest {
        chargePointId?: string;
        type?: ocpp.ResetType;
    }
    export interface ResetResponse {
        httpStatus?: number;
        error?: string[];
        data?: ocpp.DataStatusType;
    }
    export interface UnlockConnectorRequest {
        chargePointId?: string;
        connectorId?: number;
    }
    export interface UnlockConnectorResponse {
        httpStatus?: number;
        error?: string[];
        data?: ocpp.DataStatusType;
    }
    export interface ReserveNowRequest {
        chargePointId?: string;
        connectorId?: number;
        expiryDate?: string;
        idTag?: string;
        reservationId?: number;
    }
    export interface ReserveNowResponse {
        httpStatus?: number;
        error?: string[];
        data?: ocpp.DataStatusType;
    }
    export interface CancelReservationRequest {
        chargePointId?: string;
        reservationId?: number;
    }
    export interface CancelReservationResponse {
        httpStatus?: number;
        error?: string[];
        data?: ocpp.DataStatusType;
    }
    export interface DataTransferRequest {
        chargePointId?: string;
        vendorId?: string;
        messageId?: string;
        data?: string;
    }
    export interface DataTransferResponse {
        httpStatus?: number;
        error?: string[];
        data?: ocpp.DataStatusType;
    }
    export interface GetConfigurationRequest {
        chargePointId?: string;
        key?: string[];
    }
    export interface GetConfigurationResponse {
        httpStatus?: number;
        error?: string[];
        data?: ocpp.DataGetConfigurationType;
    }
    export interface GetLocalListVersionRequest {
        chargePointId?: string;
    }
    export interface GetLocalListVersionResponse {
        httpStatus?: number;
        error?: string[];
        data?: ocpp.DataGetLocalListVersionType;
    }
    export interface SendLocalListRequest {
        chargePointId?: string;
        listVersion?: number;
        localAuthorizationList?: ocpp.LocalAuthorizationListType[];
    }
    export interface SendLocalListResponse {
        httpStatus?: number;
        error?: string[];
        data?: ocpp.DataStatusType;
    }
    export interface TriggerMessageRequest {
        chargePointId?: string;
        requestedMessage?: string;
        connectorId?: number;
    }
    export interface TriggerMessageResponse {
        httpStatus?: number;
        error?: string[];
        data?: ocpp.DataStatusType;
    }
    export interface GetCompositeScheduleRequest {
        chargePointId?: string;
        connectorId?: number;
        duration?: number;
        chargingRateUnit?: string;
    }
    export interface GetCompositeScheduleResponse {
        httpStatus?: number;
        error?: string[];
        data?: ocpp.DataStatusType;
    }
    export interface SetChargingProfileRequest {
        chargePointId?: string;
        id?: number;
    }
    export interface SetChargingProfileResponse {
        httpStatus?: number;
        error?: string[];
        data?: ocpp.DataStatusType;
    }
    export interface ClearChargingProfileRequest {
        chargePointId?: string;
        id?: number;
    }
    export interface ClearChargingProfileResponse {
        httpStatus?: number;
        error?: string[];
        data?: ocpp.DataStatusType;
    }
    export enum Status {
        Accepted = 0,
        Rejected = 1,
        Unlocked = 2,
        Failed = 3,
    }
    export enum ResetType {
        Soft = 0,
        Hard = 1,
    }
    export enum UpdateType {
        Full = 0,
        Differential = 1,
    }
    export enum RequestedMessageType {
        BootNotification = 0,
        DiagnosticsStatusNotification = 1,
        FirmwareStatusNotification = 2,
        Heartbeat = 3,
        MeterValues = 4,
        StatusNotification = 5,
    }
    export interface ConfigurationKeyType {
        key?: string;
        value?: string;
        readonly?: boolean;
    }
    export interface LocalAuthorizationListType {
        idTag?: string;
        idTagInfo?: ocpp.IdTagInfoType;
        updateType?: ocpp.UpdateType;
    }
    export interface DataStatusType {
        status?: ocpp.Status;
    }
    export interface DataStartTransactionType {
        status?: ocpp.Status;
        transactionId?: number;
    }
    export interface DataGetDiagnosticsType {
        fileName?: string;
    }
    export interface DataGetConfigurationType {
        status?: ocpp.Status;
        configurationKey?: ocpp.ConfigurationKeyType[];
    }
    export interface DataGetLocalListVersionType {
        status?: ocpp.Status;
        listVersion?: number;
    }
    export interface IdTagInfoType {
        status?: ocpp.Status;
    }
}

