/**
* This file is auto-generated by nestjs-proto-gen-ts
*/

import { Observable } from 'rxjs';
import { Metadata } from '@grpc/grpc-js';

export namespace billing {
    export interface BillingService {
        transactionStarted(
            data: TransactionStartedRequest,
            metadata?: Metadata,
            ...rest: any[]
        ): Observable<TransactionStartedResponse>;
        paymentReceived(
            data: PaymentReceivedRequest,
            metadata?: Metadata,
            ...rest: any[]
        ): Observable<PaymentReceivedResponse>;
        runStartTransaction(
            data: RunStartTransactionRequest,
            metadata?: Metadata,
            ...rest: any[]
        ): Observable<RunStartTransactionResponse>;
        runStopTransaction(
            data: RunStopTransactionRequest,
            metadata?: Metadata,
            ...rest: any[]
        ): Observable<RunStopTransactionResponse>;
    }
    // tslint:disable-next-line:no-empty-interface
    export interface Empty {
    }
    export interface TransactionStartedRequest {
        chargePointId?: string;
        connectorId?: number;
        idTag?: string;
    }
    export interface TransactionStartedResponse {
        httpStatus?: number;
        transactionId?: number;
        error?: string[];
    }
    export interface PaymentReceivedRequest {
        chargePointId?: string;
        connectorId?: number;
        userId?: number;
        amount?: number;
    }
    export interface PaymentReceivedResponse {
        httpStatus?: number;
        status?: billing.Status;
        error?: string[];
    }
    export interface RunStartTransactionRequest {
        chargePointId?: string;
        connectorId?: number;
        userId?: number;
    }
    export interface RunStartTransactionResponse {
        httpStatus?: number;
        status?: billing.Status;
        error?: string[];
    }
    export interface RunStopTransactionRequest {
        chargePointId?: string;
        connectorId?: number;
        userId?: number;
    }
    export interface RunStopTransactionResponse {
        httpStatus?: number;
        status?: billing.Status;
        error?: string[];
    }
    export enum Status {
        Accepted = 0,
        Rejected = 1,
        Unlocked = 2,
        Failed = 3,
    }
}

